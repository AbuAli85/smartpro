datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id               String    @id @default(cuid())
  name             String?
  email            String?    @unique
  emailVerified    DateTime?
  password         String?
  image            String?     @default(CLIENT)
  providerType     ProviderType?
  role             UserRole      @default(CLIENT)
  status           UserStatus @default(ACTIVE)
  
  // Business/Provider fields
  companyName      String?
  companyLogo      String?
  registrationNumber String?
  taxId            String?
  companyAddress   String?   @db.Text
  phoneNumber      String?
  website          String?
  expertise        String[]
  rating           Float?    @default(0)
  
  // Security
  lastLogin        DateTime?
  loginAttempts    Int       @default(0)
  
  // Relations
  accounts         Account[]
  sessions         Session[]
  services         Service[]
  requests         Request[]  @relation("RequestClient")
  providedServices Request[]  @relation("RequestProvider")
  messages         Message[]
  documents        Document[]
  reviews          Review[]   @relation("ReviewsReceived")
  givenReviews     Review[]   @relation("ReviewsGiven")
  subscriptions    Subscription[]
  transactions     Transaction[]
  notifications    Notification[]
  
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

enum Role {
  ADMIN
  PROVIDER
  CLIENT
}

enum UserStatus {
  ACTIVE
  SUSPENDED
  INACTIVE
}

model Service {
  id          String   @id @default(cuid())
  name        String
  description String   @db.Text
  price       Float
  category    String
  status      String   @default("active")
  availability Boolean @default(true)
  terms       String?  @db.Text
  
  providerId  String
  provider    User     @relation(fields: [providerId], references: [id])
  requests    Request[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Request {
  id          String   @id @default(cuid())
  status      RequestStatus @default(PENDING)
  description String   @db.Text
  deadline    DateTime?
  
  clientId    String
  client      User     @relation("RequestClient", fields: [clientId], references: [id])
  providerId  String
  provider    User     @relation("RequestProvider", fields: [providerId], references: [id])
  serviceId   String
  service     Service  @relation(fields: [serviceId], references: [id])
  
  messages    Message[]
  documents   Document[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model Message {
  id        String   @id @default(cuid())
  content   String   @db.Text
  read      Boolean  @default(false)
  
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  requestId String
  request   Request  @relation(fields: [requestId], references: [id])
  
  createdAt DateTime @default(now())
}

model Document {
  id        String   @id @default(cuid())
  name      String
  type      String
  url       String
  
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  requestId String?
  request   Request? @relation(fields: [requestId], references: [id])
  
  createdAt DateTime @default(now())
}

model Review {
  id          String   @id @default(cuid())
  rating      Int
  comment     String?  @db.Text
  
  fromId      String
  from        User     @relation("ReviewsGiven", fields: [fromId], references: [id])
  toId        String
  to          User     @relation("ReviewsReceived", fields: [toId], references: [id])
  
  createdAt   DateTime @default(now())
}

model Subscription {
  id          String   @id @default(cuid())
  plan        String
  status      String
  startDate   DateTime
  endDate     DateTime
  
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Transaction {
  id          String   @id @default(cuid())
  amount      Float
  type        String
  status      String
  
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  
  createdAt   DateTime @default(now())
}

model Notification {
  id        String   @id @default(cuid())
  type      String
  title     String
  message   String   @db.Text
  read      Boolean  @default(false)
  
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  
  createdAt DateTime @default(now())
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

