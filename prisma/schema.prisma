generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String       @id @default(cuid())
  name              String?
  email             String?      @unique
  emailVerified     DateTime?
  image             String?
  password          String?
  role              UserRole     @default(CLIENT)
  providerType      ProviderType?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  mfaEnabled        Boolean      @default(false)
  status            String       @default("ACTIVE")
  subscriptionPlan  String       @default("FREE")
  username          String?      @unique
  loginAttempts     Int          @default(0)
  lastLoginAttempt  DateTime?

  // Company Details
  companyName       String?
  companySize       String?
  crNumber          String?      // Commercial Registration number
  vatNumber         String?
  companyAddress    String?
  verificationStatus VerificationStatus @default(PENDING)

  // Relationships
  accounts          Account[]
  sessions          Session[]
  services          Service[]
  subscriptions     Subscription[]
  serviceRequests   ServiceRequest[]    // For clients
  providedServices  ServiceRequest[]    @relation("Provider") // For providers
  reviews           Review[]            // Reviews received (for providers)
  givenReviews      Review[]           @relation("Reviewer") // Reviews given (by clients)
  systemLogs        SystemLog[]
}

model Service {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Float
  userId      String   // Provider ID
  category    String
  status      ServiceStatus @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  requests    ServiceRequest[]
  subscriptions Subscription[]
}

model ServiceRequest {
  id          String   @id @default(cuid())
  clientId    String
  providerId  String
  serviceId   String
  status      RequestStatus @default(PENDING)
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  client      User     @relation(fields: [clientId], references: [id])
  provider    User     @relation("Provider", fields: [providerId], references: [id])
  service     Service  @relation(fields: [serviceId], references: [id])
  messages    Message[]
}

model Subscription {
  id          String   @id @default(cuid())
  userId      String
  serviceId   String
  status      SubscriptionStatus @default(ACTIVE)
  startDate   DateTime @default(now())
  endDate     DateTime?
  
  user        User     @relation(fields: [userId], references: [id])
  service     Service  @relation(fields: [serviceId], references: [id])
  payments    Payment[]
}

model Payment {
  id              String   @id @default(cuid())
  subscriptionId  String
  amount          Float
  status          PaymentStatus @default(PENDING)
  createdAt       DateTime @default(now())
  
  subscription    Subscription @relation(fields: [subscriptionId], references: [id])
}

model Review {
  id          String   @id @default(cuid())
  reviewerId  String
  providerId  String
  rating      Int
  comment     String?
  createdAt   DateTime @default(now())
  
  reviewer    User     @relation("Reviewer", fields: [reviewerId], references: [id])
  provider    User     @relation(fields: [providerId], references: [id])
}

model Message {
  id          String   @id @default(cuid())
  requestId   String
  senderId    String
  content     String
  createdAt   DateTime @default(now())
  
  request     ServiceRequest @relation(fields: [requestId], references: [id])
}

enum UserRole {
  ADMIN
  CLIENT
  PROVIDER
}

enum ProviderType {
  FREELANCER
  LAWYER
  AUDITOR
  PR
  OTHER
}

enum VerificationStatus {
  PENDING
  VERIFIED
  REJECTED
}

enum ServiceStatus {
  PENDING
  ACTIVE
  SUSPENDED
}

enum RequestStatus {
  PENDING
  ACCEPTED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

model SystemLog {
  id        String   @id @default(cuid())
  level     String
  message   String
  timestamp DateTime
  data      Json?
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])

  @@index([timestamp])
  @@index([level])
  @@index([userId])
}

